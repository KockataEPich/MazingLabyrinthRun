{
   "Player" : 
   {
      "type" : "producer",
      "includes" : [],
      "components" : ["ActionType", "FacingSide", "Velocity", "Player", "Transform"],
      "public_functions" : ["void init() override { m_registered_entities.reserve(1); }  // Only one player"]
   },

   "AI" : 
   {
      "type" : "producer",
      "components" : ["AI", "Velocity"],
      "public_functions" : ["int const tick_frequency() override { return 5; }"]
   },

   "Animate" : 
   {
      "type" : "producer",
      "components" : ["ActionType", "Skin", "FacingSide", "AnimationPlayer", "Transform", "Sprite"]
   },
   
   "CheckCrosshairCollision" : 
   {
      "type" : "producer",
      "var_name" : "check_crosshair_collision",
      "components" : ["Mouse", "Boundary"]
   },

   "Transform" : 
   {
      "type" : "producer",
      "components" : ["Transform", "Sprite"]
   },

   "Projectile" : 
   {
      "type" : "producer",
      "components" : ["Projectile", "Velocity"]
   },


   "AttackAction" : 
   {
      "var_name" : "attack_action",
      "type" : "react",
      "components" : ["ActionType", "FacingSide", "InitiateAction", "Transform"]
   },

   "Move" : 
   {
      "type" : "react",
      "components" : ["Transform", "Speed", "Velocity", "Boundary", "Move"]
   },

   "CollisionDetection" : 
   {
      "var_name" : "collision_detection",
      "type" : "react",
      "components" : ["Boundary", "CollisionCheck", "Velocity"]
   },

   "BasicDamage" : 
   {
      "var_name" : "basic_damage",
      "type" : "impulse",
      "initiator_components" : ["BasicAttackNeedle"],
      "victim_components" : ["HealthPoints"]
   },

   "BasicCollision" : 
   {
      "var_name" : "basic_collision",
      "type" : "impulse",
      "initiator_components" : ["Solid", "Velocity"],
      "victim_components" : ["Solid", "DefaultCollisionArmor"]
   },

   "ProjectileCollision" : 
   {
      "var_name" : "projectile_collision",
      "type" : "impulse",
      "initiator_components" : ["Projectile"],
      "victim_components" : ["Solid", "HealthPoints", "AI"]
   },

   "RenderHealth" : 
   {
      "type" : "render",
      "var_name" : "render_health",
      "includes" : [],
      "public_functions" : ["void init() override;"],
      "components" : ["Transform", "HealthPoints"],
      "members" : [
         {
            "sf::Font" :
            {
               "name" : "font"
            }
         }
      ]
   },

   "RenderSprite" : 
   {
      "type" : "render",
      "var_name" : "render_sprite",
      "includes" : [],

      "public_functions" : ["void register_entity(Entity const& entity) override;",
                            "void unregister_entity(Entity const& entity) override;"],

      "private_functions" : ["void draw_level(std::vector<std::pair<sf::Sprite*, Entity>>& sprites, bool draw_hitbox = false);",
                             "std::vector<std::pair<sf::Sprite*, Entity>>& get_level_vector(ElevationLevel level);"],

      "components" : ["Sprite", "ElevationLevel"],
      "members" : [
         {
            "std::vector<std::pair<sf::Sprite*, Entity>>" :
            {
               "name" : "level_one_sprites"
            }
         },
         {
            "std::vector<std::pair<sf::Sprite*, Entity>>" :
            {
               "name" : "level_two_sprites"
            }
         },
         {
            "std::vector<std::pair<sf::Sprite*, Entity>>" :
            {
               "name" : "level_UI_sprites"
            }
         }
      ]
   },

   "RenderQuadTree" : 
   {
      "type" : "render",
      "var_name" : "render_quad_tree",
      "includes" : [],

      "private_functions" : ["void render_full_quad_tree(QuadTree& quad_tree);"],
      "components" : []
   },

   "UpdateTransformFromBoundary" : 
   {
      "type" : "react",
      "var_name" : "update_transform_from_boundary",
      "includes" : [],

      "private_functions" : [],
      "components" : ["UpdateTransformFromBoundary", "Transform", "Boundary", "Skin"]
   },

   "UpdateBoundaryFromTransform" : 
   {
      "type" : "react",
      "var_name" : "update_boundary_from_transform",
      "includes" : [],

      "private_functions" : [],
      "components" : ["UpdateBoundaryFromTransform", "Boundary", "Transform", "Skin"]
   },

   "UpdateCrosshairPosition" : 
   {
      "type" : "react",
      "var_name" : "update_crosshair_position",
      "components" : ["UpdateMousePosition", "Transform", "Mouse", "Boundary", "Sprite"]
   },

   "FlashWhite" : 
   {
      "type" : "react",
      "var_name" : "flash_white",
      "components" : ["FlashWhite", "AnimationPlayer", "Skin"]
   }
}